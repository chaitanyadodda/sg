from datetime import timedelta
from airflow import DAG, Dataset
from airflow.models import Variable
from airflow.operators.dummy_operator import DummyOperator
from airflow.utils.dates import days_ago
from kubernetes.client import models as k8s_models
from custom_k8s_operator import KittuK8sPodOperator  # Import your custom operator

_le_data = Dataset("file:/Domino/volumes/airflow_pv/logs")

default_args = {
    'owner': 'Airflow',
    'depends_on_past': False,
    'start_date': days_ago(0),
    'catchup': False,
    'email': ['airflow@example.com'],
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 0,
    'retry_delay': timedelta(minutes=5),
}

CONJUR_CONTAINER_SPEC = k8s_models.V1Container(
    name="authenticator",
    image="docker.repo.usaa.com/cyberark/conjur-kubernetes-authenticator:0.19.0",
    env=[
        k8s_models.V1EnvVar(name="CONJUR_MAJOR_VERSION", value="5"),
        k8s_models.V1EnvVar(
            name="MY_POD_NAME",
            value_from=k8s_models.V1EnvVarSource(
                field_ref=k8s_models.V1ObjectFieldSelector(
                    field_path="metadata.name"
                )
            ),
        ),
        k8s_models.V1EnvVar(
            name="MY_POD_NAMESPACE",
            value_from=k8s_models.V1EnvVarSource(
                field_ref=k8s_models.V1ObjectFieldSelector(
                    field_path="metadata.namespace"
                )
            ),
        ),
        k8s_models.V1EnvVar(
            name="MY_POD_IP",
            value_from=k8s_models.V1EnvVarSource(
                field_ref=k8s_models.V1ObjectFieldSelector(
                    field_path="status.podIP"
                )
            ),
        ),
        k8s_models.V1EnvVar(
            name="CONJUR_APPLIANCE_URL",
            value="https://conjur-follower.grp-inf-csi-conjur.svc.cluster.local",
        ),
        k8s_models.V1EnvVar(
            name="CONJUR_AUTHN_URL",
            value="https://conjur-follower.grp-inf-csi-conjur.svc.cluster.local/authn-k8s/ocp",
        ),
        k8s_models.V1EnvVar(
            name="CONJUR_AUTHN_LOGIN",
            value="host/conjur/authn-k8s/ocp/apps/grp-mlops-notebook-server/*/*",
        ),
        k8s_models.V1EnvVar(name="CONJUR_ACCOUNT", value="usaa"),
        k8s_models.V1EnvVar(
            name="CONJUR_SSL_CERTIFICATE",
            value_from=k8s_models.V1EnvVarSource(
                config_map_key_ref=k8s_models.V1ConfigMapKeySelector(
                    name="conjur-config-map",
                    key="ssl-certificate",
                ),
            ),
        ),
    ],
    volume_mounts=[
        k8s_models.V1VolumeMount(
            mount_path="/run/conjur/",
            name="conjur-access-token",
        ),
        k8s_models.V1VolumeMount(
            mount_path="/mnt/airflow-" + Variable.get("AIRFLOW_ENV", "stage") + "-logs",
            name="airflow-" + Variable.get("AIRFLOW_ENV", "stage") + "-logs",
        ),
    ],
)

le_pod = k8s_models.V1Pod(
    spec=k8s_models.V1PodSpec(
        containers=[
            k8s_models.V1Container(
                name="task-basic-python-helloworld",
                image="docker.repo.usaa.com/usaa/grp-python-innersource/python-runtime-data-py39-ubi8:2023.1-3",
                command=["python", "-c"],
                args=[
                    'import time; start=time.time(); print("Python is getting sleepy..."); [time.sleep(s) for s in range(5, 0, -1)]; print(f"Python has woken up after {time.time() - start} seconds.")'
                ],
                volume_mounts=[
                    k8s_models.V1VolumeMount(
                        mount_path="/run/conjur/",
                        name="conjur-access-token",
                    ),
                    k8s_models.V1VolumeMount(
                        mount_path="/mnt/airflow-" + Variable.get("AIRFLOW_ENV", "stage") + "-logs",
                        name="airflow-" + Variable.get("AIRFLOW_ENV", "stage") + "-logs",
                    ),
                ],
            ),
            CONJUR_CONTAINER_SPEC,
        ],
        volumes=[
            k8s_models.V1Volume(
                name="conjur-access-token",
                empty_dir=k8s_models.V1EmptyDirVolumeSource(),
            ),
            k8s_models.V1Volume(
                name="airflow-" + Variable.get("AIRFLOW_ENV", "stage") + "-logs",
                persistent_volume_claim=k8s_models.V1PersistentVolumeClaimVolumeSource(
                    claim_name="airflow-" + Variable.get("AIRFLOW_ENV", "stage") + "-logs"
                ),
            ),
        ],
    )
)

with DAG(
    'dag_that_executes_via_KittuK8sPodOperator',
    default_args=default_args,
    schedule_interval=None,
    max_active_runs=2,
) as dag:

    example_task = KittuK8sPodOperator(
        namespace="grp-mlops-notebook-server",
        pod_name="python-innersource-runtime-hello-world",
        image="docker.repo.usaa.com/usaa/grp-python-innersource/python-runtime-data-py39-ubi8:2023.1-3",
        command=["python", "-c"],
        args=[
            'import time; start=time.time(); print("Python is getting sleepy..."); [time.sleep(s) for s in range(5, 0, -1)]; print(f"Python has woken up after {time.time() - start} seconds.")'
        ],
        env_vars=[
            k8s_models.V1EnvVar(name="EXAMPLE_ENV_VAR", value="example_value")
        ],
        volume_mounts=[
            k8s_models.V1VolumeMount(
                mount_path="/run/conjur/",
                name="conjur-access-token",
            ),
            k8s_models.V1VolumeMount(
                mount_path="/mnt/airflow-" + Variable.get("AIRFLOW_ENV", "stage") + "-logs",
                name="airflow-" + Variable.get("AIRFLOW_ENV", "stage") + "-logs",
            ),
        ],
        volumes=[
            k8s_models.V1Volume(
                name="conjur-access-token",
                empty_dir=k8s_models.V1EmptyDirVolumeSource(),
            ),
            k8s_models.V1Volume(
                name="airflow-" + Variable.get("AIRFLOW_ENV", "stage") + "-logs",
                persistent_volume_claim=k8s_models.V1PersistentVolumeClaimVolumeSource(
                    claim_name="airflow-" + Variable.get("AIRFLOW_ENV", "stage") + "-logs"
                ),
            ),
        ],
        task_id="example_task",
        in_cluster=True,
        is_delete_operator_pod=True,
        get_logs=True,
        image_pull_policy="IfNotPresent",
        execution_timeout=timedelta(hours=1),
    )
